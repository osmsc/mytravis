# tutorial
global designLast
set designLast 3
global designLastSectionDone
set designLastSectionDone -1


set designName0 {アプリケーションの設計}
set designText0 {\
典型的な Tcl/Tk のアプリケーションでは、まず初めに
ダイアログ・ウィンドウが１つあります。ここから他の
ダイアログ・ウィンドウを起動（表示）したり、アプリ
ケーションの他の機能を実行したりします。Tcl/Tk で
は、このようなメインのダイアログ・ウィンドウを持た
ないアプリケーションを作ることは難しく、少なくとも
１つのウィンドウは常に表示されていることになります。
このメイン・ウィンドウは、"." という名前で参照され
ます。これが、アプリケーションの他のすべてのウィン
ドウ（ウィジェット）のルートになります。従って、こ
のウィンドウを削除するということは、アプリケーショ
ン全体を終了するということと同等です。このことは、
アプリケーションのダイアログの取り扱いに影響を及ぼ
しますので、設計時には十分に考慮する必要があります。}


set designName1 {アプリケーションの設計}
set designText1 {\
"." として参照されるメイン・ウィンドウ上には、起動
時のインタフェースを構成するウィジェット群が配置さ
れています。このメインのダイアログ・ウィンドウ上で
は必要とされない他の構成要素については、別のトップ
レベル・ウィジェット上に配置することができます。トッ
プレベル・ウィジェットは、メイン・ウィンドウと同様
に、ウィンドウ・マネージャによって管理され、その他
のウィジェットを保持することができます。メイン・ウィ
ンドウとの唯一の違いは、必要がなくなった時に削除す
ることができるということです。

様々なトップレベル・ウィンドウ上には、様々な構成の
ウィジェット群が配置されています。ウィジェットがウィ
ジェットを含有し、その組合せがアプリケーションのイ
ンタフェースを形成します。ウィジェットは、その名前
によって構成／参照されます。あるウィジェットの子供
となっているウィジェットは、その親の名前と自分の名
前を "." でつないだ名前によって参照することができ
ます。例えば "frame1" という frame の子供となって
いる "button1" という名前のウィジェットは、
".frame1.button1" という名前で参照されます。}


set designName2 {アプリケーションの設計}
set designText2 {\
アプリケーションのレイアウトを構成するために、pack 
や place を用いることができます。pack は、ある規範
に従ってすべてのウィジェットを詰め込むためのもので
す。すでに pack されたウィジェット群に対して、新た
にウィジェットを追加してやることも可能です。place 
は、各々のウィジェットに対して直接位置と大きさを指
定してやるためのものです。

まずは、これら２つのレイアウトの手法を試してみて下
さい。大抵の場合には、pack の方がより便利であるこ
とがわかると思います。同一のトップレベル・ウィンド
ウ上で２つのレイアウトの手法を組合わせて用いること
は可能ですが、これはあまりお勧めできません。あなた
が熟練したユーザであり、２つのレイアウトの手法につ
いて熟知し、その組合せの効果を必要とするときのみに
とどめるべきでしょう。

pack/place についてのマニュアルや、このチュートリ
アルのこれらのレイアウトの手法の使い方について説明
した章を熟読されることをお勧めします。}


set designName3 {アプリケーションの設計}
set designText3 {\
アプリケーションの機能は、ウィジェットに対して定義
されるものであり、ウィジェットを介して起動されるも
のです。そしてその機能は、普通 Tcl/Tk のプログラム
として記述されるものです。ここで、Tcl/Tk に関する
経験が必要とされるわけです。（と同時に、ここで 
Tcl/Tk の経験が得られるわけですが ...）

ここで述べたアプリケーションの設計に関するステップ・
バイ・ステップのアプローチは、理想的なものです。こ
のような方法で実際に作業することは、ほとんどないで
しょう。拡張や改良の必要にともなって、作業半ばに起
こるウィジェットの構成やレイアウト、機能の変更は不
可避なものです。だからこそ、この XF を用いたアプリ
ケーションの設計と実現の方法は、有用な規範と成り得
るのです。}
