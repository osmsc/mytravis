# Program: xf
# Description: handle frame widgets
#

package require tile

global xfDefaultConf
set xfDefaultConf(tframe) 2

##########
# Procedure: XFAdd.TFrame
# Description: add a TFrame
# Arguments: xfW - the widget
#            xfName - a optional name
#            xfType - add or config
# Returns: none
# Sideeffects: none
##########
proc XFAdd.TFrame {xfW xfName xfType} {
  global xfStatus

  XFEditSetStatus "Inserting TFrame..."
  set xfName [XFMiscGetUniqueName $xfName tframe]
  if {"$xfStatus(path)" == "."} {
    if {"$xfType" == "add"} {
      ttk::frame .$xfName \
        -width 30 -height 30 \
	-borderwidth 2 \
        -relief raised
    } {
      ttk::frame .$xfName
    }

    XFMiscPositionWidget .$xfName {} {-x 0 -y 0 -width 30 -height 30}
    XFMiscBindWidgetTree .$xfName
  } {
    if {"$xfType" == "add"} {
      ttk::frame $xfStatus(path).$xfName \
        -width 30 -height 30 \
        -borderwidth 2 \
        -relief raised
    } {
      ttk::frame $xfStatus(path).$xfName
    }

    XFMiscPositionWidget $xfStatus(path).$xfName {} {-x 0 -y 0 -width 30 -height 30}
    XFMiscBindWidgetTree $xfStatus(path).$xfName
  }

  incr xfStatus(elementCounter)
  XFEditSetPath $xfStatus(path)
  XFEditSetStatus "Inserting TFrame...done"
}

##########
# Procedure: XFConfig.TFrame4
# Description: configure a frame
# Arguments: xfW - the widget
#            xfType - config type (add config)
#            xfClass - the class we configure
#            xfLeader - the leading window
# Returns: none
# Sideeffects: none
##########
proc XFConfig.TFrame4 {xfW xfType xfClass {xfLeader ""}} {
  global xfStatus

  if {"$xfType" == "add"} {
    set xfName frame$xfStatus(elementCounter)
  } {
    set xfName [XFMiscPathName $xfW]
  }
  XFEditSetStatus "Calling parameter setting for TFrame..."

  # build widget structure
  XFTmpltToplevel .xf${xfClass}Config4 400x440 \
    "TFrame parameters:[XFMiscPathTail $xfW]" $xfLeader

  XFElementInit $xfW .xf${xfClass}Config4 $xfType $xfClass \
    XFTFrameSetTFrame4 parameters $xfName 4
  XFElementScale $xfW .xf${xfClass}Config4 $xfType $xfClass borderwidth \
    borderWidth BorderWidth "Border width" "pixels" 40 XFTFrameSetTFrame4
  XFElementCursor $xfW .xf${xfClass}Config4 $xfType $xfClass \
    XFTFrameSetTFrame4
  XFElementGeometry $xfW .xf${xfClass}Config4 $xfType $xfClass \
    XFTFrameSetTFrame4
  XFElementRelief $xfW .xf${xfClass}Config4 $xfType $xfClass \
    XFTFrameSetTFrame4

  if {"$xfType" == "add"} {
    .xf${xfClass}Config4.params1.params2.borderwidth.borderwidth set 2
  }

  # save current parameter
  XFElementSave $xfW $xfClass {borderwidth cursor width relief}

  # packing
  pack append .xf${xfClass}Config4.params1 \
              .xf${xfClass}Config4.params1.params2 {left fill expand}
  pack append .xf${xfClass}Config4 \
              .xf${xfClass}Config4.pathname {top fill frame center} \
              .xf${xfClass}Config4.leave {bottom fill} \
              .xf${xfClass}Config4.additional {bottom fill} \
              .xf${xfClass}Config4.params1 {top fill expand}

  XFBindFormConnect .xf${xfClass}Config4.params1.params2 \
    "XFTFrameSetTFrame4 $xfW 0 $xfClass"

  XFEditSetStatus "Calling parameter setting for TFrame...done"
}

##########
# Procedure: XFSaveWidget.TFrame
# Description: save frame widget
# Arguments: xfOutFile - the output file
#            xfW - the widget
# Returns: none
# Sideeffects: none
##########
proc XFSaveWidget.TFrame {xfOutFile xfW} {
  global xfConf

  set xfClass [winfo class $xfW]
  set xfType [string tolower $xfClass]
  set xfType "ttk::frame"

  # what are we doing here ?
  puts $xfOutFile "\n  # build widget $xfW"
  puts $xfOutFile "  $xfType $xfW" nonewline
  foreach xfCounter [$xfW config] {
    # only handle options with 5 items per option entry
    if {[llength $xfCounter] == 5} {
      if {"[lindex $xfCounter 3]" != "[lindex $xfCounter 4]"} {
        if {$xfConf(encloseConfigure)} {
          puts $xfOutFile " \\\n    [lindex $xfCounter 0] {[lindex $xfCounter 4]}" nonewline
        } {
          puts $xfOutFile " \\\n    [lindex $xfCounter 0] \"[lindex $xfCounter 4]\"" nonewline
        }
      }
    }
  }
  puts $xfOutFile ""
}

##########
# Procedure: XFTFrameSetTFrame4
# Description: set frame parameters
# Arguments: xfW - the widget
#            xfType - the type of setting (1 = set always, 0 = set
#                     only if permanent apply is on)
#            xfClass - the class we configure
#            xfParam1 - ignored parameter
# Returns: none
# Sideeffects: none
##########
proc XFTFrameSetTFrame4 {xfW xfType xfClass {xfParam1 ""}} {
  global xfConf
  global xfMisc

  if {$xfType == 0 && !$xfConf(applyParameters)} {
    return
  }
  if {"[info commands $xfW]" == ""} {
    return
  }
  XFMiscSetSymbolicName $xfW \
    [.xf${xfClass}Config4.params1.params2.symname.symname get]
  XFMiscSetResource $xfW borderwidth \
    [.xf${xfClass}Config4.params1.params2.borderwidth.borderwidth get]
  XFMiscSetResource $xfW cursor \
    "[.xf${xfClass}Config4.params1.params2.cursor.cursor get]"
  if {[.xf${xfClass}Config4.params1.params2.geo.geo1.geo1 get] > 0 &&
      [.xf${xfClass}Config4.params1.params2.geo.geo2.geo2 get] > 0} {
    XFMiscSetResource $xfW width \
      [.xf${xfClass}Config4.params1.params2.geo.geo1.geo1 get]
    XFMiscSetResource $xfW height \
      [.xf${xfClass}Config4.params1.params2.geo.geo2.geo2 get]
  } {
  }
  XFMiscSetResource $xfW relief $xfMisc(relief)
}

# eof

