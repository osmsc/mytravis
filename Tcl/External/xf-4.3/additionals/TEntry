# Program: xf
# Description: handle entry widgets
#

package require tile

global xfDefaultConf
set xfDefaultConf(tentry) 4

##########
# Procedure: XFAdd.TEntry
# Description: add a TEntry
# Arguments: xfW - the widget
#            xfName - a optional name
#            xfType - add or config
# Returns: none
# Sideeffects: none
##########
proc XFAdd.TEntry {xfW xfName xfType} {
  global xfStatus

  XFEditSetStatus "Inserting TEntry..."
  set xfName [XFMiscGetUniqueName $xfName tentry]
  if {"$xfStatus(path)" == "."} {
    if {"$xfType" == "add"} {
      ttk::entry .$xfName
    } {
      ttk::entry .$xfName
    }
    .$xfName insert 0 $xfName

    XFMiscPositionWidget .$xfName
    XFMiscBindWidgetTree .$xfName
  } {
    if {"$xfType" == "add"} {
      ttk::entry $xfStatus(path).$xfName
    } {
      ttk::entry $xfStatus(path).$xfName
    }
    $xfStatus(path).$xfName insert 0 $xfName

    XFMiscPositionWidget $xfStatus(path).$xfName
    XFMiscBindWidgetTree $xfStatus(path).$xfName
  }

  incr xfStatus(elementCounter)
  XFEditSetPath $xfStatus(path)
  XFEditSetStatus "Inserting TEntry...done"
}

##########
# Procedure: XFConfig.TEntry4
# Description: configure a TEntry
# Arguments: xfW - the widget
#            xfType - config type (add config)
#            xfClass - the class we configure
#            xfLeader - the leading window
# Returns: none
# Sideeffects: none
##########
proc XFConfig.TEntry4 {xfW xfType xfClass {xfLeader ""}} {
  global xfConf
  global xfStatus

  if {"$xfType" == "add"} {
    set xfName tentry$xfStatus(elementCounter)
  } {
    set xfName [XFMiscPathName $xfW]
  }
  XFEditSetStatus "Calling parameter setting for TEntry..."

  # build widget structure
  XFTmpltToplevel .xf${xfClass}Config4 400x500 \
    "TEntry parameters:[XFMiscPathTail $xfW]" $xfLeader

  XFElementInit $xfW .xf${xfClass}Config4 $xfType $xfClass XFTEntrySetTEntry4 \
    parameters $xfName 4
  XFElementBoolean $xfW .xf${xfClass}Config4 $xfType $xfClass exportSelection \
    "Export selection" XFTEntrySetTEntry4

  XFElementText $xfW .xf${xfClass}Config4 $xfType $xfClass command \
    xscrollCommand XScrollCommand "Scroll command" XFTEntrySetTEntry4

  XFElementTextVariable $xfW .xf${xfClass}Config4 $xfType $xfClass \
    XFTEntrySetTEntry4

  XFElementTileWidth $xfW .xf${xfClass}Config4 $xfType $xfClass \
    XFTEntrySetTEntry4

  # save current parameter
  XFElementSave $xfW $xfClass {exportselection xscrollcommand textvariable width}

  # packing
  pack append .xf${xfClass}Config4.params1 \
              .xf${xfClass}Config4.params1.params2 {left fill expand}
  pack append .xf${xfClass}Config4 \
              .xf${xfClass}Config4.pathname {top fill frame center} \
              .xf${xfClass}Config4.leave {bottom fill} \
              .xf${xfClass}Config4.additional {bottom fill} \
              .xf${xfClass}Config4.params1 {top fill expand}

  XFBindFormConnect .xf${xfClass}Config4.params1.params2 \
    "XFTEntrySetTEntry4 $xfW 0 $xfClass"

  XFEditSetStatus "Calling parameter setting for TEntry...done"
}

##########
# Procedure: XFSaveSpecial.TEntry
# Description: save entry
# Arguments: xfW - the widget
# Returns: none
# Sideeffects: none
##########
proc XFSaveSpecial.TEntry {xfW} {

  if {"[lindex [$xfW config -textvariable] 4]" == ""} {
    set result [$xfW get]
    if {"[string index $result [expr [string length $result]-1]]" == "\\"} {
      return "  $xfW insert end \{$result \}\n"
    } {
      return "  $xfW insert end \{$result\}\n"
    }
  }
  return ""
}

##########
# Procedure: XFTEntrySetTEntry4
# Description: set entry parameters
# Arguments: xfW - the widget
#            xfType - the type of setting (1 = set always, 0 = set
#                     only if permanent apply is on)
#            xfClass - the class we configure
#            xfParam1 - ignored parameter
# Returns: none
# Sideeffects: none
##########
proc XFTEntrySetTEntry4 {xfW xfType xfClass {xfParam1 ""}} {
  global xfConf
  global xfMisc

  if {$xfType == 0 && !$xfConf(applyParameters)} {
    return
  }
  if {"[info commands $xfW]" == ""} {
    return
  }
  XFMiscSetSymbolicName $xfW \
    [.xf${xfClass}Config4.params1.params2.symname.symname get]
  XFMiscSetResource $xfW exportselection $xfMisc(exportSelection)
  XFMiscSetResource $xfW xscrollcommand \
    "[.xf${xfClass}Config4.params1.params2.command.command get]"
  XFMiscSetResource $xfW textvariable \
    [.xf${xfClass}Config4.params1.params2.textvar.textvar get]
  XFMiscSetResource $xfW width \
    [.xf${xfClass}Config4.params1.params2.widthvar.widthvar get]
}

# eof

