# Program: xf
# Description: handle entry widgets
#
# $Header: Entry[2.3] Wed Mar 10 11:58:44 1993 garfield@garfield frozen $

global xfDefaultConf
set xfDefaultConf(entry) 4

##########
# Procedure: XFAdd.Entry
# Description: add a entry
# Arguments: xfW - the widget
#            xfName - a optional name
#            xfType - add or config
# Returns: none
# Sideeffects: none
##########
proc XFAdd.Entry {xfW xfName xfType} {
  global xfStatus

  XFEditSetStatus "Inserting Entry..."
  set xfName [XFMiscGetUniqueName $xfName entry]
  if {"$xfStatus(path)" == "."} {
    if {"$xfType" == "add"} {
      entry .$xfName
    } {
      entry .$xfName
    }
    .$xfName insert 0 $xfName

    XFMiscPositionWidget .$xfName
    XFMiscBindWidgetTree .$xfName
  } {
    if {"$xfType" == "add"} {
      entry $xfStatus(path).$xfName
    } {
      entry $xfStatus(path).$xfName
    }
    $xfStatus(path).$xfName insert 0 $xfName

    XFMiscPositionWidget $xfStatus(path).$xfName
    XFMiscBindWidgetTree $xfStatus(path).$xfName
  }

  incr xfStatus(elementCounter)
  XFEditSetPath $xfStatus(path)
  XFEditSetStatus "Inserting Entry...done"
}

##########
# Procedure: XFConfig.Entry4
# Description: configure a entry
# Arguments: xfW - the widget
#            xfType - config type (add config)
#            xfClass - the class we configure
#            xfLeader - the leading window
# Returns: none
# Sideeffects: none
##########
proc XFConfig.Entry4 {xfW xfType xfClass {xfLeader ""}} {
  global xfConf
  global xfStatus

  if {"$xfType" == "add"} {
    set xfName entry$xfStatus(elementCounter)
  } {
    set xfName [XFMiscPathName $xfW]
  }
  XFEditSetStatus "Calling parameter setting for Entry..."

  # build widget structure
  XFTmpltToplevel .xf${xfClass}Config4 400x500 \
    "Entry parameters:[XFMiscPathTail $xfW]" $xfLeader

  XFElementInit $xfW .xf${xfClass}Config4 $xfType $xfClass XFEntrySetEntry4 \
    parameters $xfName 4
  XFElementColor $xfW .xf${xfClass}Config4 $xfType $xfClass bg \
    background Background "Background" XFEntrySetEntry4
  XFElementScale $xfW .xf${xfClass}Config4 $xfType $xfClass borderwidth \
    borderWidth BorderWidth "Border width" "pixels" 40 XFEntrySetEntry4
  XFElementBoolean $xfW .xf${xfClass}Config4 $xfType $xfClass exportSelection \
    "Export selection" XFEntrySetEntry4
  XFElementFont $xfW .xf${xfClass}Config4 $xfType $xfClass font \
    font Font "Font" XFEntrySetEntry4
  if {$xfConf(kanji)} {
    XFElementFont $xfW .xf${xfClass}Config4 $xfType $xfClass kanjifont \
      kanjiFont KanjiFont "Kanji font" XFEntrySetEntry4
  }
  XFElementColor $xfW .xf${xfClass}Config4 $xfType $xfClass fg \
    foreground Foreground "Foreground" XFEntrySetEntry4
  XFElementRelief $xfW .xf${xfClass}Config4 $xfType $xfClass XFEntrySetEntry4

  XFElementText $xfW .xf${xfClass}Config4 $xfType $xfClass command \
    xscrollCommand XScrollCommand "Scroll command" XFEntrySetEntry4

  XFElementTextVariable $xfW .xf${xfClass}Config4 $xfType $xfClass \
    XFEntrySetEntry4
  XFElementScale $xfW .xf${xfClass}Config4 $xfType $xfClass width \
    width Width "Width" "pixels" 200 XFEntrySetEntry4

  # save current parameter
  if {$xfConf(kanji)} {
    XFElementSave $xfW $xfClass {background borderwidth exportselection font kanjifont foreground relief xscrollcommand textvariable width}
  } {
    XFElementSave $xfW $xfClass {background borderwidth exportselection font foreground relief xscrollcommand textvariable width}
  }

  # packing
  pack append .xf${xfClass}Config4.params1 \
              .xf${xfClass}Config4.params1.params2 {left fill expand}
  pack append .xf${xfClass}Config4 \
              .xf${xfClass}Config4.pathname {top fill frame center} \
              .xf${xfClass}Config4.leave {bottom fill} \
              .xf${xfClass}Config4.additional {bottom fill} \
              .xf${xfClass}Config4.params1 {top fill expand}

  XFBindFormConnect .xf${xfClass}Config4.params1.params2 \
    "XFEntrySetEntry4 $xfW 0 $xfClass"

  XFEditSetStatus "Calling parameter setting for Entry...done"
}

##########
# Procedure: XFSaveSpecial.Entry
# Description: save entry
# Arguments: xfW - the widget
# Returns: none
# Sideeffects: none
##########
proc XFSaveSpecial.Entry {xfW} {

  if {"[lindex [$xfW config -textvariable] 4]" == ""} {
    set result [$xfW get]
    if {"[string index $result [expr [string length $result]-1]]" == "\\"} {
      return "  $xfW insert end \{$result \}\n"
    } {
      return "  $xfW insert end \{$result\}\n"
    }
  }
  return ""
}

##########
# Procedure: XFEntrySetEntry4
# Description: set entry parameters
# Arguments: xfW - the widget
#            xfType - the type of setting (1 = set always, 0 = set
#                     only if permanent apply is on)
#            xfClass - the class we configure
#            xfParam1 - ignored parameter
# Returns: none
# Sideeffects: none
##########
proc XFEntrySetEntry4 {xfW xfType xfClass {xfParam1 ""}} {
  global xfConf
  global xfMisc

  if {$xfType == 0 && !$xfConf(applyParameters)} {
    return
  }
  if {"[info commands $xfW]" == ""} {
    return
  }
  XFMiscSetSymbolicName $xfW \
    [.xf${xfClass}Config4.params1.params2.symname.symname get]

  XFMiscSetResource $xfW background \
    [.xf${xfClass}Config4.params1.params2.bg.bg get]
  XFMiscSetResource $xfW borderwidth \
    [.xf${xfClass}Config4.params1.params2.borderwidth.borderwidth get]
  XFMiscSetResource $xfW exportselection $xfMisc(exportSelection)
  XFMiscSetResource $xfW font \
    [.xf${xfClass}Config4.params1.params2.font.font get]
  if {$xfConf(kanji)} {
    XFMiscSetResource $xfW kanjifont \
      [.xf${xfClass}Config4.params1.params2.kanjifont.kanjifont get]
  }
  XFMiscSetResource $xfW foreground \
    [.xf${xfClass}Config4.params1.params2.fg.fg get]
  XFMiscSetResource $xfW relief $xfMisc(relief)
  XFMiscSetResource $xfW xscrollcommand \
    "[.xf${xfClass}Config4.params1.params2.command.command get]"
  XFMiscSetResource $xfW textvariable \
    [.xf${xfClass}Config4.params1.params2.textvar.textvar get]
  XFMiscSetResource $xfW width \
    [.xf${xfClass}Config4.params1.params2.width.width get]
}

# eof

